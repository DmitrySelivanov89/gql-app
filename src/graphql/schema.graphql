directive @auth on OBJECT | FIELD_DEFINITION
directive @cacheControl(
    maxAge: Int
    scope: CacheControlScope
) on FIELD_DEFINITION | OBJECT | INTERFACE
# Exposes a URL that specifies the behaviour of this scalar.
directive @specifiedBy(
    # The URL that specifies the behaviour of this scalar.
    url: String!
) on SCALAR
type Account {
    id: Int!
    login: EmailAddress!
    createdAt: DateTime!
    updatedAt: DateTime!
}

input AccountCreateInput {
    login: EmailAddress!
    password: String!
}

enum AccountOrderByInput {
    id_ASC
    id_DESC
    login_ASC
    login_DESC
    createdAt_ASC
    createdAt_DESC
    updatedAt_ASC
    updatedAt_DESC
}

type Accounts {
    totalCount: Int!
    list: [Account!]!
}

input AccountUpdateInput {
    login: EmailAddress
}

input AccountWhereInput {
    AND: [AccountWhereInput]
    OR: [AccountWhereInput]
    id: Int
    id_not: Int
    id_in: [Int]
    id_not_in: [Int]
    login: String
    login_not: String
    login_contains: String
    login_not_contains: String
    login_starts_with: String
    login_not_starts_with: String
    login_ends_with: String
    login_not_ends_with: String
    login_lt: String
    login_lte: String
    login_gt: String
    login_gte: String
    login_in: [String]
    login_not_in: [String]
    createdAt: DateTime
    createdAt_not: DateTime
    createdAt_in: [DateTime]
    createdAt_not_in: [DateTime]
    createdAt_lt: DateTime
    createdAt_lte: DateTime
    createdAt_gt: DateTime
    createdAt_gte: DateTime
    updatedAt: DateTime
    updatedAt_not: DateTime
    updatedAt_in: [DateTime]
    updatedAt_not_in: [DateTime]
    updatedAt_lt: DateTime
    updatedAt_lte: DateTime
    updatedAt_gt: DateTime
    updatedAt_gte: DateTime
}

type AuthTokens {
    login: EmailAddress!
    accessToken: String!
    refreshToken: String!
}

enum CacheControlScope {
    PUBLIC
    PRIVATE
}

# A field whose value is a Currency: https://en.wikipedia.org/wiki/ISO_4217.
scalar Currency

# A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
# `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
# 8601 standard for representation of dates and times using the Gregorian calendar.
scalar DateTime

# A field whose value conforms to the standard internet email address format as
# specified in RFC822: https://www.w3.org/Protocols/rfc822/.
scalar EmailAddress

# The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSONObject

type Me {
    id: Int!
    login: EmailAddress!
    refreshToken: String!
    createdAt: DateTime!
    updatedAt: DateTime!
}

type Mutation {
    authenticate(login: String!, password: String!): AuthTokens!
    register(login: String!, password: String!): AuthTokens!
    refresh(refreshToken: String!): AuthTokens!
    createAccount(data: AccountCreateInput!): Boolean!
    updateAccount(id: Int!, data: AccountUpdateInput!): Account!
    deleteAccount(id: Int!): Boolean!
}

# A string that cannot be passed as an empty value
scalar NonEmptyString

# A field whose value conforms to the standard E.164 format as specified in:
# https://en.wikipedia.org/wiki/E.164. Basically this is +17895551234.
scalar PhoneNumber

type Query {
    check: Boolean!
    me: Me!
    account(where: AccountWhereInput!): Account!
    accounts(
        where: AccountWhereInput
        orderBy: AccountOrderByInput
        skip: Int
        limit: Int
    ): Accounts!
}

# Integers that will have a value of 0 or more.
scalar UnsignedInt

# The `Upload` scalar type represents a file upload.
scalar Upload

# A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
scalar URL

